/* Asteroids view
*/

/* C libraries */
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>

/* hardware platform libraries */
#include <display.h>
#include <mbed.h>

#include "asteroids.h"
#include "model.h"
#include "utils.h"
#include "controller.h"
/*lcd pointer so can put thing onthe screen*/
Display *graphics = Display::theDisplay();

/*colour of the background is blue*/
const colour_t background = rgb(0,51,102); /* Midnight Blue */
/*this is the bitmap info for the tin tin image*/ 
#define tintin_width 64
#define tintin_height 64
static unsigned char tintin_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x06, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x80, 0x3f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1e, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x10, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x9e, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x9e, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xc0, 0x1f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x0f, 0x02, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x10, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x08, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x84, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x8e, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0x0f, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x80, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
   0xcf, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x87, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xfe, 0xff, 0x83, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff,
   0x41, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x21, 0x00, 0x00, 0x00,
   0x00, 0xfe, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff,
   0x07, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00,
   0xe0, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff,
   0x07, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00,
   0xfc, 0xff, 0xf7, 0xff, 0x07, 0x00, 0x00, 0x00, 0xfe, 0x3f, 0xe0, 0xff,
   0x07, 0x00, 0x00, 0x00, 0xff, 0x07, 0xf8, 0xff, 0x07, 0x00, 0x00, 0x00,
   0xff, 0x00, 0xfe, 0xff, 0x07, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x7f, 0xff,
   0x07, 0x00, 0x00, 0x00, 0x3e, 0x80, 0x3f, 0xfe, 0x07, 0x00, 0x00, 0x00,
   0x08, 0xc0, 0x3f, 0xfe, 0x03, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1f, 0xfe,
   0x03, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0xfe, 0x03, 0x00, 0x00, 0x00,
   0x00, 0xf0, 0x0f, 0xfe, 0x03, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0xff,
   0x01, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0xff, 0x01, 0x00, 0x00, 0x00,
   0x00, 0xc0, 0x00, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xe0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x0f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xf8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00 };

	 /*the ship coordinates*/
const coordinate_t shape[] = {
    {10,0}, {-5,5}, {-5,-5}
};
/*the ships other infromation such as centre point, velocity components and speed"*/	
tim line={
	0.15,255,100,-1,-1,10
};

/*a lot of static variables to help with drawing */
static int x1;
static int y1;
static int x2;
static int y2;
static int x3;
static int y3;
static int x;
static int y;
static int xx;
static int yy;
static int xx1;
static int yy1;
static float a2;
static float a3;
static float a1;
static float a21;
static int shieldOk;
static int king1=1;
static float starx=200.0;
static float stary=100.0;


/* double buffering functions */
void init_DBuffer(void)
{   /* initialise the LCD driver to use second frame in buffer */
    uint16_t *bufferbase = graphics->getFb();
    uint16_t *nextbuffer = bufferbase+ (480*272);
    LPC_LCD->UPBASE = (uint32_t)nextbuffer;
}
void swap_DBuffer(void)
{   /* swaps frames used by the LCD driver and the graphics object */
    uint16_t *buffer = graphics->getFb();
    graphics->setFb( (uint16_t*) LPC_LCD->UPBASE);
    LPC_LCD->UPBASE = (uint32_t)buffer;
}

/*drawing of the linked to the screen this doesn't work properly*/
void DrawBullets(struct missile *list){
	while(list !=NULL){
			graphics->drawRect(list->x,list->y,2,3,GREEN);
			list=list->next;
	}
}
void DrawRocks(struct rock *list){
	while(list !=NULL){
			graphics->drawCircle(list->x,list->y,list->size,GREEN);
			list=list->next;
	}
}

/*this method draws the triangle and updates it*/
void DrawTriangle(){
	/*work out the position of ship three points after angle rotation*/
	 x1=shape[0].x*cos(line.heading)-shape[0].y*sin(line.heading);
	 y1=shape[0].x*sin(line.heading)+shape[0].y*cos(line.heading);
	 x2=shape[1].x*cos(line.heading)-shape[1].y*sin(line.heading);
	 y2=shape[1].x*sin(line.heading)+shape[1].y*cos(line.heading);
	 x3=shape[2].x*cos(line.heading)-shape[2].y*sin(line.heading);
	 y3=shape[2].x*sin(line.heading)+shape[2].y*cos(line.heading);
	 x = x1 + line.x;
   y = y1 + line.y;
	 xx=x2 + line.x;
	 yy=y2 + line.y;
	 xx1=x3 + line.x;
	 yy1=y3 + line.y;
	/*drawing the shipp*/
	graphics->fillTriangle(x,y,xx,yy,xx1,yy1,BLACK);
/* updateing the ship if left or right it roatates the ship if up it speed it up*/
	if(joystickleft()==true){
	 line.heading=line.heading+0.15;
		if(line.heading>=6.00){
			line.heading=0;
	}
}
	if(rightOk){
		line.heading=line.heading-0.15;
		if(line.heading<=0.0){
			line.heading=6;
		}
	}
	if(joystickup()==true){
		line.vx=line.vx+line.speed;
		line.vy=line.vy+line.speed;
		line.vx=line.speed*cos(line.heading);
		line.vy=line.speed*sin(line.heading);
		line.x=line.x+line.vx;
		line.y=line.y+line.vy;
		
		/*wrap around*/
		if(line.x<=0){
			//shieldOk=0;
			line.x=470;
		}
		else if(line.y<=0){
			//shieldOk=0;
			line.y=260;
		}
		else if(line.x>=470){
			//shieldOk=0;
			line.x=0;
		}
		else if(line.y>=260){
			shieldOk=0;
			line.y=0;
			
		}
		/*if it hits the shield cordinates then make a sheild*/
		else if(200<=line.x &&line.x<=207 &&100<=line.y&&line.y<103){
			shieldOk=5;
		}
	}
}

/* inofmration about the bullets*/
m bullet={
	line.x,line.y,line.vy,line.vx,10,10
};

rockinfo rock={
	randrange(10,200),randrange(10,100),randrange(-1,1),randrange(-1,1),randrange(5,10)
};

/*drawing a bullet on the screen this works*/
void DrawBullet(){
		graphics->drawRect(bullet.x,bullet.y,2,3,GREEN);
	bullet.vx=bullet.vx+bullet.speed;
		bullet.vy=bullet.vy+bullet.speed;
		bullet.x=bullet.x+bullet.vx;
		bullet.y=bullet.y+bullet.vy;
}
/*drawing a rock on the screen this works*/
void Drawrocks(){
	graphics->drawCircle(rock.x,rock.y,rock.size,BLACK);
	graphics->drawCircle(rock.x,rock.y,rock.size,BLACK);
	graphics->drawCircle(rock.x,rock.y,rock.size,BLACK);
	graphics->drawCircle(rock.x,rock.y,rock.size,BLACK);
	graphics->drawCircle(rock.x,rock.y,rock.size,BLACK);
	graphics->drawCircle(rock.x,rock.y,rock.size,BLACK);
}

/* drawing information about live and score*/
void  DrawSidebar(){
	graphics->setCursor(330,160);
	graphics->setTextColor(WHITE);
graphics->setTextSize(2);	  
graphics->printf("ASTEROIDS");  
graphics->setCursor(330,180);	  
graphics->printf("lives:%3d",lives); 
graphics->setCursor(330,200);	 
graphics->printf("score:%3d",score);
}
/* game over screen*/
void GameOver(){
	graphics->setCursor(330,160);
	graphics->setTextColor(WHITE);
  graphics->setTextSize(2);	  
graphics->printf("ASTEROIDS");  
graphics->setCursor(330,180);	  
graphics->printf("lives:");
	graphics->setCursor(130,100);	 
graphics->printf("game Over");
graphics->setCursor(330,200);	 
graphics->printf("press center to restart");
}

/*hame page*/
void homepage(){
	graphics->drawBitmap(200,100,tintin_bits,64,64,WHITE);
	graphics->setCursor(150,200);
	graphics->setTextColor(WHITE);
  graphics->setTextSize(3);	  
graphics->printf("ASTEROIDS");  
	graphics->setCursor(100,100);
	 graphics->setTextSize(2);	  
graphics->printf("press center to start game");
}

/*missile and rock pointers*/
struct missile *active;
struct rock *active1;

/* drawing method*/
void draw(void)
{
	/*background to be dark blue*/
	graphics->fillScreen(background);
	/*
	if(shieldOk<5){
	graphics->fillRect(starx,stary,5,3,RED);
	}
	if(shieldOk>=5){
		graphics->fillRect(stary,starx,5,3,background);
	graphics->drawCircle(line.x,line.y,12,GREEN);
	}
	graphics->setCursor(350,20);
	*/  
	
	/* if the game hasn't started show home screen 
	if centre has been pressed start game and set lives
	*/
  if(started==false){
		homepage();
		if(joystickcentre()==true){
			lives=100;
			started=true;
		}
	}
	
	/* if lives a bigger than zero show everthing on screen*/
	if(lives>0 &&started==true){
	  DrawSidebar();
	  Drawrocks();
	  DrawTriangle();
		/* if centre gets pressed it will though bullets*/
	  if(joystickcentre()==true){
	  DrawBullets(active);
		DrawBullet();
		}
		/*increment and decrement the score and lives respectivly*/
		score++;
		lives--;
	}
	
	/* if live is less then zero show game over screen*/
	if(lives<=0&&started==true){
		GameOver();
		if(joystickcentre()==true){
			lives=100;
		}
	}
    swap_DBuffer();
}
